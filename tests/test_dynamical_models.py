from numpy.testing import assert_allclose, assert_equal
import unittest
import numpy as np

from qspectra.hamiltonian import ElectronicHamiltonian, VibronicHamiltonian
from qspectra.operator_tools import unit_vec
from qspectra.bath import DebyeBath
from qspectra.constants import CM_K, CM_FS
from qspectra.simulate.eom import simulate_dynamics
from qspectra.dynamics.redfield import RedfieldModel
import qspectra.dynamics.liouville_space as liouville_space
from test_hamiltonian import TestVibronicHamiltonian

# class SharedTests(object):
#     def setUp(self):
#         self.H_electronic = np.array([[11500, 66], [66, 11650]])
#         n_vibrational_levels = np.array([2, 2])
#         vib_energies = np.array([200, 200])
#         elec_vib_couplings = -32 * np.eye(2)
#         bath = DebyeBath(CM_K * 77, 1.5 * 35, 106)
#         dipoles = [[1,0,0], [0,1,0]]

#         dimer_ham = VibronicHamiltonian(
#             ElectronicHamiltonian(H_electronic, dipoles=dipoles, bath=bath),
#             n_vibrational_levels, vib_energies, elec_vib_couplings)
#         dimer = RedfieldModel(dimer_ham, hilbert_subspace='gef', unit_convert=CM_FS,
#                               discard_imag_corr=True)
#         dimer_ham.to_dataframe('gef')

class TestRedfield(unittest.TestCase):
    def setUp(self):
        H_electronic = np.array([[11500, 66], [66, 11650]])
        n_vibrational_levels = np.array([2, 2])
        vib_energies = np.array([200, 200])
        elec_vib_couplings = -32 * np.eye(2)
        bath = DebyeBath(CM_K * 77, 1.5 * 35, 106)
        dipoles = [[1,0,0], [0,1,0]]
        H_E = ElectronicHamiltonian(H_electronic, bath=bath,
                                                  dipoles=dipoles,
                                                  disorder=0)
        H_sys = VibronicHamiltonian(H_E, n_vibrational_levels,
                                    vib_energies, elec_vib_couplings)
        self.redfield_model = RedfieldModel(H_sys, hilbert_subspace='gef', unit_convert=CM_FS,
                              discard_imag_corr=True, evolve_basis='exciton')

    def test_dynamics(self):
        t, rho = simulate_dynamics(self.redfield_model, unit_vec(0, (2 * 2 ** 2) ** 2), 10)
        np.testing.assert_array_almost_equal(rho, 
            np.array([[  1.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j,
                      0.00000000e+00 +0.00000000e+00j],
                   [  9.88379760e-01 +3.00442815e-19j,
                      1.10288000e-03 -2.75096054e-04j,
                      5.33898696e-03 +2.92660947e-02j,
                      3.01473226e-04 -9.48264944e-05j,
                     -1.27423597e-02 -6.02191072e-02j,
                      6.05372088e-04 -3.42695120e-04j,
                      1.38461678e-03 -5.08460301e-04j,
                     -7.42138076e-06 +1.20998175e-05j,
                      1.10288000e-03 +2.75096054e-04j,
                      1.14066374e-03 -4.23755087e-20j,
                     -4.19709597e-04 +3.32084589e-05j,
                      1.64477124e-04 -1.93519953e-06j,
                     -1.29287948e-03 -9.59940032e-05j,
                     -5.10252119e-04 -1.89694937e-05j,
                      2.45238063e-04 -1.71160391e-05j,
                     -7.03382061e-06 -8.36782998e-08j,
                      5.33898696e-03 -2.92660947e-02j,
                     -4.19709597e-04 -3.32084589e-05j,
                      1.82862004e-03 -1.13793339e-18j,
                     -4.99322001e-05 -1.02490381e-05j,
                     -1.91004511e-03 +3.08388121e-05j,
                      2.01821311e-04 -3.24436554e-05j,
                     -2.71802211e-04 -5.46392290e-05j,
                     -1.23555697e-05 +3.00216426e-07j,
                      3.01473226e-04 +9.48264944e-05j,
                      1.64477124e-04 +1.93519953e-06j,
                     -4.99322001e-05 +1.02490381e-05j,
                      4.42729024e-05 +2.32775318e-22j,
                     -2.07236175e-04 -3.19402787e-05j,
                     -7.07114436e-05 -4.48045381e-06j,
                      2.89963031e-05 -2.59689047e-06j,
                     -9.62600036e-06 -4.56069863e-09j,
                     -1.27423597e-02 +6.02191072e-02j,
                     -1.29287948e-03 +9.59940032e-05j,
                     -1.91004511e-03 -3.08388121e-05j,
                     -2.07236175e-04 +3.19402787e-05j,
                      8.15594369e-03 -3.21274463e-18j,
                      7.36938844e-04 +1.09152912e-04j,
                     -3.67692099e-04 +1.71368960e-04j,
                      1.40251333e-06 -2.17722072e-07j,
                      6.05372088e-04 +3.42695120e-04j,
                     -5.10252119e-04 +1.89694937e-05j,
                      2.01821311e-04 +3.24436554e-05j,
                     -7.07114436e-05 +4.48045381e-06j,
                      7.36938844e-04 -1.09152912e-04j,
                      2.77610680e-04 -5.25321252e-20j,
                     -1.11835028e-04 +1.41813969e-05j,
                      1.56694291e-06 +1.48106963e-07j,
                      1.38461678e-03 +5.08460301e-04j,
                      2.45238063e-04 +1.71160391e-05j,
                     -2.71802211e-04 +5.46392290e-05j,
                      2.89963031e-05 +2.59689047e-06j,
                     -3.67692099e-04 -1.71368960e-04j,
                     -1.11835028e-04 -1.41813969e-05j,
                      1.68310968e-04 +1.51592432e-20j,
                      1.18094385e-05 +7.02207767e-08j,
                     -7.42138076e-06 -1.20998175e-05j,
                     -7.03382061e-06 +8.36782998e-08j,
                     -1.23555697e-05 -3.00216426e-07j,
                     -9.62600036e-06 +4.56069863e-09j,
                      1.40251333e-06 +2.17722072e-07j,
                      1.56694291e-06 -1.48106963e-07j,
                      1.18094385e-05 -7.02207767e-08j,
                      4.81790629e-06 +1.79980612e-22j]]))

if __name__ == '__main__':
    unittest.main()
